var documenterSearchIndex = {"docs":
[{"location":"#","page":"Introduction","title":"Introduction","text":"DocTestSetup = :(using ChainRules)\nCurrentModule = ChainRules","category":"page"},{"location":"#ChainRules-1","page":"Introduction","title":"ChainRules","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Hello! Welcome to ChainRules's documentation.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"For an initial overview of ChainRules, please see the README. Otherwise, feel free to peruse available documentation via the sidebar.","category":"page"},{"location":"getting_started/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Forward-Mode-vs.-Reverse-Mode-Chain-Rule-Evaluation-1","page":"Getting Started","title":"Forward-Mode vs. Reverse-Mode Chain Rule Evaluation","text":"","category":"section"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"TODO","category":"page"},{"location":"getting_started/#Real-Scalar-Differentiation-Rules-1","page":"Getting Started","title":"Real Scalar Differentiation Rules","text":"","category":"section"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"TODO","category":"page"},{"location":"getting_started/#Complex-Scalar-Differentiation-Rules-1","page":"Getting Started","title":"Complex Scalar Differentiation Rules","text":"","category":"section"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"TODO","category":"page"},{"location":"getting_started/#Non-Scalar-Differentiation-Rules-1","page":"Getting Started","title":"Non-Scalar Differentiation Rules","text":"","category":"section"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"TODO","category":"page"},{"location":"api/#ChainRules-API-Documentation-1","page":"ChainRules API Documentation","title":"ChainRules API Documentation","text":"","category":"section"},{"location":"api/#","page":"ChainRules API Documentation","title":"ChainRules API Documentation","text":"ChainRules.frule\nChainRules.rrule\nChainRules.AbstractRule\nChainRules.Rule\nChainRules.DNERule\nChainRules.WirtingerRule\nChainRules.accumulate\nChainRules.accumulate!\nChainRules.store!","category":"page"},{"location":"api/#ChainRules.frule","page":"ChainRules API Documentation","title":"ChainRules.frule","text":"frule(f, x...)\n\nExpressing x as the tuple (x₁, x₂, ...) and the output tuple of f(x...) as Ω, return the tuple:\n\n(Ω, (rule_for_ΔΩ₁::AbstractRule, rule_for_ΔΩ₂::AbstractRule, ...))\n\nwhere each returned propagation rule rule_for_ΔΩᵢ can be invoked as\n\nrule_for_ΔΩᵢ(Δx₁, Δx₂, ...)\n\nto yield Ωᵢ's corresponding differential ΔΩᵢ. To illustrate, if all involved values are real-valued scalars, this differential can be written as:\n\nΔΩᵢ = ∂Ωᵢ_∂x₁ * Δx₁ + ∂Ωᵢ_∂x₂ * Δx₂ + ...\n\nIf no method matching frule(f, xs...) has been defined, then return nothing.\n\nExamples:\n\nunary input, unary output scalar function:\n\njulia> x = rand();\n\njulia> sinx, dsin = frule(sin, x);\n\njulia> sinx == sin(x)\ntrue\n\njulia> dsin(1) == cos(x)\ntrue\n\nunary input, binary output scalar function:\n\njulia> x = rand();\n\njulia> sincosx, (dsin, dcos) = frule(sincos, x);\n\njulia> sincosx == sincos(x)\ntrue\n\njulia> dsin(1) == cos(x)\ntrue\n\njulia> dcos(1) == -sin(x)\ntrue\n\nSee also: rrule, AbstractRule, @scalar_rule\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainRules.rrule","page":"ChainRules API Documentation","title":"ChainRules.rrule","text":"rrule(f, x...)\n\nExpressing x as the tuple (x₁, x₂, ...) and the output tuple of f(x...) as Ω, return the tuple:\n\n(Ω, (rule_for_Δx₁::AbstractRule, rule_for_Δx₂::AbstractRule, ...))\n\nwhere each returned propagation rule rule_for_Δxᵢ can be invoked as\n\nrule_for_Δxᵢ(ΔΩ₁, ΔΩ₂, ...)\n\nto yield xᵢ's corresponding differential Δxᵢ. To illustrate, if all involved values are real-valued scalars, this differential can be written as:\n\nΔxᵢ = ∂Ω₁_∂xᵢ * ΔΩ₁ + ∂Ω₂_∂xᵢ * ΔΩ₂ + ...\n\nIf no method matching rrule(f, xs...) has been defined, then return nothing.\n\nExamples:\n\nunary input, unary output scalar function:\n\njulia> x = rand();\n\njulia> sinx, dx = rrule(sin, x);\n\njulia> sinx == sin(x)\ntrue\n\njulia> dx(1) == cos(x)\ntrue\n\nbinary input, unary output scalar function:\n\njulia> x, y = rand(2);\n\njulia> hypotxy, (dx, dy) = rrule(hypot, x, y);\n\njulia> hypotxy == hypot(x, y)\ntrue\n\njulia> dx(1) == (y / hypot(x, y))\ntrue\n\njulia> dy(1) == (x / hypot(x, y))\ntrue\n\nSee also: frule, AbstractRule, @scalar_rule\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainRules.AbstractRule","page":"ChainRules API Documentation","title":"ChainRules.AbstractRule","text":"Subtypes of AbstractRule are types which represent the primitive derivative propagation \"rules\" that can be composed to implement forward- and reverse-mode automatic differentiation.\n\nMore specifically, a rule::AbstractRule is a callable Julia object generally obtained via calling frule or rrule. Such rules accept differential values as input, evaluate the chain rule using internally stored/ computed partial derivatives to produce a single differential value, then return that calculated differential value.\n\nFor example:\n\njulia> using ChainRules: frule, rrule, AbstractRule\n\njulia> x, y = rand(2);\n\njulia> h, dh = frule(hypot, x, y);\n\njulia> h == hypot(x, y)\ntrue\n\njulia> isa(dh, AbstractRule)\ntrue\n\njulia> Δx, Δy = rand(2);\n\njulia> dh(Δx, Δy) == ((y / h) * Δx + (x / h) * Δy)\ntrue\n\njulia> h, (dx, dy) = rrule(hypot, x, y);\n\njulia> h == hypot(x, y)\ntrue\n\njulia> isa(dx, AbstractRule) && isa(dy, AbstractRule)\ntrue\n\njulia> Δh = rand();\n\njulia> dx(Δh) == (y / h) * Δh\ntrue\n\njulia> dy(Δh) == (x / h) * Δh\ntrue\n\nSee also: frule, rrule, Rule, DNERule, WirtingerRule\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.Rule","page":"ChainRules API Documentation","title":"ChainRules.Rule","text":"Rule(propation_function[, updating_function])\n\nReturn a Rule that wraps the given propation_function. It is assumed that propation_function is a callable object whose arguments are differential values, and whose output is a single differential value calculated by applying internally stored/computed partial derivatives to the input differential values.\n\nIf an updating function is provided, it is assumed to have the signature u(Δ, xs...) and to store the result of the propagation function applied to the arguments xs into Δ in-place, returning Δ.\n\nFor example:\n\nfrule(::typeof(*), x, y) = x * y, Rule((Δx, Δy) -> Δx * y + x * Δy)\n\nrrule(::typeof(*), x, y) = x * y, (Rule(ΔΩ -> ΔΩ * y'), Rule(ΔΩ -> x' * ΔΩ))\n\nSee also: frule, rrule, accumulate, accumulate!, store!\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.DNERule","page":"ChainRules API Documentation","title":"ChainRules.DNERule","text":"DNERule(args...)\n\nConstruct a DNERule object, which is an AbstractRule that signifies that the current function is not differentiable with respect to a particular parameter. DNE is an abbreviation for Does Not Exist.\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.WirtingerRule","page":"ChainRules API Documentation","title":"ChainRules.WirtingerRule","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.accumulate","page":"ChainRules API Documentation","title":"ChainRules.accumulate","text":"accumulate(Δ, rule::AbstractRule, args...)\n\nReturn Δ + rule(args...) evaluated in a manner that supports ChainRules' various AbstractDifferential types.\n\nThis method intended to be customizable for specific rules/input types. For example, here is pseudocode to overload accumulate w.r.t. a specific forward differentiation rule for a given function f:\n\ndf(x) = # forward differentiation primitive implementation\n\nfrule(::typeof(f), x) = (f(x), Rule(df))\n\naccumulate(Δ, rule::Rule{typeof(df)}, x) = # customized `accumulate` implementation\n\nSee also: accumulate!, store!, AbstractRule\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainRules.accumulate!","page":"ChainRules API Documentation","title":"ChainRules.accumulate!","text":"accumulate!(Δ, rule::AbstractRule, args...)\n\nSimilar to accumulate, but compute Δ + rule(args...) in-place, storing the result in Δ.\n\nNote that this function internally calls Base.Broadcast.materialize!(Δ, ...).\n\nSee also: accumulate, store!, AbstractRule\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainRules.store!","page":"ChainRules API Documentation","title":"ChainRules.store!","text":"store!(Δ, rule::AbstractRule, args...)\n\nCompute rule(args...) and store the result in Δ, potentially avoiding intermediate temporary allocations that might be necessary for alternative approaches (e.g. copyto!(Δ, extern(rule(args...))))\n\nNote that this function internally calls Base.Broadcast.materialize!(Δ, ...).\n\nLike accumulate and accumulate!, this function is intended to be customizable for specific rules/input types.\n\nSee also: accumulate, accumulate!, AbstractRule\n\n\n\n\n\n","category":"function"},{"location":"api/#","page":"ChainRules API Documentation","title":"ChainRules API Documentation","text":"ChainRules.AbstractDifferential\nChainRules.extern\nChainRules.Casted\nChainRules.Wirtinger\nChainRules.Thunk\nChainRules.Zero\nChainRules.DNE\nChainRules.One","category":"page"},{"location":"api/#ChainRules.AbstractDifferential","page":"ChainRules API Documentation","title":"ChainRules.AbstractDifferential","text":"The subtypes of AbstractDifferential define a custom \"algebra\" for chain rule evaluation that attempts to factor various features like complex derivative support, broadcast fusion, zero-elision, etc. into nicely separated parts.\n\nAll subtypes of AbstractDifferential implement the following operations:\n\nadd(a, b): linearly combine differential a and differential b\n\nmul(a, b): multiply the differential a by the differential b\n\nBase.conj(x): complex conjugate of the differential x\n\nextern(x): convert x into an appropriate non-AbstractDifferential type for use outside of ChainContext.\n\nValid arguments to these operations are T where T<:AbstractDifferential, or where T has proper + and * implementations.\n\nAdditionally, all subtypes of AbstractDifferential support Base.iterate and Base.Broadcast.broadcastable(x).\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.extern","page":"ChainRules API Documentation","title":"ChainRules.extern","text":"extern(x)\n\nReturn x converted to an appropriate non-AbstractDifferential type, for use with external packages that might not handle AbstractDifferential types.\n\nNote that this function may return an alias (not necessarily a copy) to data wrapped by x, such that mutating extern(x) might mutate x itself.\n\n\n\n\n\n","category":"function"},{"location":"api/#ChainRules.Casted","page":"ChainRules API Documentation","title":"ChainRules.Casted","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.Wirtinger","page":"ChainRules API Documentation","title":"ChainRules.Wirtinger","text":"Wirtinger(primal::Union{Number,AbstractDifferential},\n          conjugate::Union{Number,AbstractDifferential})\n\nReturns a Wirtinger instance representing the complex differential:\n\ndf = ∂f/∂z * dz + ∂f/∂z̄ * dz̄\n\nwhere primal corresponds to ∂f/∂z * dz and conjugate corresponds to ∂f/∂z̄ * dz̄.\n\nThe two fields of the returned instance can be accessed generically via the wirtinger_primal and wirtinger_conjugate methods.\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.Thunk","page":"ChainRules API Documentation","title":"ChainRules.Thunk","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.Zero","page":"ChainRules API Documentation","title":"ChainRules.Zero","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.DNE","page":"ChainRules API Documentation","title":"ChainRules.DNE","text":"TODO\n\n\n\n\n\n","category":"type"},{"location":"api/#ChainRules.One","page":"ChainRules API Documentation","title":"ChainRules.One","text":"TODO\n\n\n\n\n\n","category":"type"}]
}
